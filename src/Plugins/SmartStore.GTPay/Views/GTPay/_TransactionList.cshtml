@using Telerik.Web.Mvc.UI;
@using SmartStore.Web.Framework;
@using SmartStore.Web.Framework.UI;
@using SmartStore.GTPay.Models;
@model ConfigurationModel




            @*@using (Html.BeginForm("TransactionUpdate", "GTPay", FormMethod.Post, new { id = "manufacturer-form" }))*@

@using (Html.BeginForm())
            {
                <div>

                    @(Html.Telerik().Grid<TransactionLog>(Model.TransactionLogsForGrid.Data)
        .Name("Grid")
        .DataKeys(keys => keys.Add(x => x.TransactionRefNo).RouteKey("TransactionRefNo"))
        .Columns(columns =>
        {
            columns.Command(commands =>
            {
                commands.Edit();
            }).Width(180);

            //columns.Bound(x => x.TransactionRefNo)
            //       .ClientTemplate("<a href=\"Edit/<#= Id #>\"><#= TransactionRefNo #></a>");
            columns.Bound(x => x.TransactionStatus).ReadOnly();
            columns.Bound(x => x.TransactionRefNo).ReadOnly();
            columns.Bound(x => x.TransactionDate).Format("{0:yyyy-MM-dd HH:mm:ss}").ReadOnly();
            columns.Bound(x => x.ApprovedAmount).Format("{0:0,0.00}").ReadOnly();
            columns.Bound(x => x.ResponseCode).ReadOnly();
            columns.Bound(x => x.ResponseDescription).ReadOnly();
            columns.Bound(x => x.MerchantReference).ReadOnly();
            //columns.Bound(x => x.Gateway).ReadOnly();
            columns.Bound(x => x.DatePaid).Format("{0:yyyy-MM-dd HH:mm:ss}").ReadOnly();

        })
         .DataBinding(dataBinding =>
         {
             dataBinding.Ajax()
                 .Select("TransactionList", "GTPay", new RouteValueDictionary() { { "area", "SmartStore.GTPay" } })
                 .Update("TransactionLog", "GTPay", new RouteValueDictionary() { { "area", "SmartStore.GTPay" } });
             //.Update("UpdateTransactionLog", "GTPay", new RouteValueDictionary() { { "area", "SmartStore.GTPay" } });
         })
        .Editable(x =>
        {
            x.Mode(GridEditMode.InLine);
        })
        //.ToolBar(commands => commands.Edit())
        //.ClientEvents(events => {
        //    events.OnEdit("onEdit");
        //    //events.OnDataBound("onProductCategoryDataBound");
        //})

        .Pageable(settings => settings.PageSize(Model.GridPageSize).Position(GridPagerPosition.Both))
        .PreserveGridState()
        .EnableCustomBinding(true)
                    )
                </div>
            }
      